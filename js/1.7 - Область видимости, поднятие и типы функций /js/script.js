console.log("1.7")

// Локальная область

// Области видимости в JavaScript необходимы для того, чтобы организовать и управлять доступом к переменным и функциям в вашем коде. Область видимости определяет, где переменные и функции могут быть использованы в вашей программе, и какие части кода имеют доступ к ним.

function myFunction() {
    var localVariable = "I'm a local variable";
    console.log(localVariable);
}

myFunction(); // "I'm a local variable"
// console.log(localVariable); // ReferenceError: localVariable is not defined

// Здесь мы объявляем переменную "localVariable" внутри функции "myFunction". Эта переменная является локальной и доступна только внутри функции "myFunction". Когда мы пытаемся использовать эту переменную за пределами функции, мы получаем ошибку "ReferenceError: localVariable is not defined", потому что переменная не определена в этой области видимости.


// Переменную нужно создавать на максимально глубоком уровне и выносить наверх, если это требуется.

function field1() {
    if (true) {
        const result = '3';
    }
    return result;
}


function field2() {
    let result;
    if (true) {
        result = '3';
    }
    return result;
}

// Нужно запомнить простое правило:
// "Переменные из внешней области видимости доступны во внутренней области."

// Ну или так:
// "Мы знаем о переменных снаружи, но не знаем о переменных внутри"

function run() {
    // область видимости функции run()
    const message = 'Беги!'

    if (true) {
        // область видимости блока if
        const friend = 'Данил'
        console.log(message) // 'Беги!'
    }

    // console.log(friend) // ReferenceError
}
run()

const tryMe = "Я в глобальной область видимости";

function tryFN() {
    const tryMe = "Я вобласти видимости функуии трай";

    for (let index = 0; index < 1; index++) {

        //const tryMe = "Я вобласти видимости цикла ФОР";

        if (true) {
            const tryMe = "Я вобласти видимости IF";

        }
        console.log(tryMe); //трай

    }
    console.log(tryMe); //трай

}

tryFN()

// "Кроме того, области видимости в JavaScript позволяют создавать замыкания, что является мощной концепцией в функциональном программировании. Замыкания позволяют сохранять доступ к переменным и функциям внутри функций, которые уже были завершены. Это может быть полезно для создания более эффективного кода, который использует меньше памяти."

// Типы функций:

// - обычная (function declaration)
function nameDecl(params) {

}
// - внутри переменной или объекта (function expression) - Здесь мы сразу присваиваем её переменной, так что смысл примеров кода такой: "создать функцию и поместить её в переменную".

const functionExpression = function (params) {

}

// - стрелочная функция - краткая запись функции с некоторыми особенностями

const arrowFn0 = function () {

}
// 1. Убираем слово Фанкшн и дбавляем стреклу после ПАРАМЕТРОВ
const arrowFn1 = (a, b) => {
    return a + b
}

// 2. Если функция в одну строку, то можно убрать РЕТЕРН и фигурные скобки. Все что идет после стрелки - считается возвратом функции
const arrowFn2 = (a, b) => a + b;

// 3. Если параметр всего один, то можно не писать круглые скобки вокруг параметра
const arrowFn3 = a => a * 2;

// 4. Но если параметров нет вообще, то скобки нужно вернуть
const arrowFn4 = () => 2 + 10;


// Типы переменных:
// - let
// - const
// - var


// Всё работает как надо
// var a = 10;

// console.log(a);


// Консоль пишет андефайнд, хотя переменной не существует
// if (1 > 10) {
//     var a = 10;
// }

// console.log(a);


// Как JS видит наш код?
// var a;

// if (1 > 10) {
//     a = 10;
// }

// console.log(a);



// Если просто создать переменную, но ничего ей не присвоить, ее значение будет "неопределено" (undefuned)

// Тоже работает нормально
console.log(a);
var a = 10;
